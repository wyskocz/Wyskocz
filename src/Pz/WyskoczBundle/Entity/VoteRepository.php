<?php

namespace Pz\WyskoczBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Pz\WyskoczBundle\Entity\Vote;
/**
 * VoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoteRepository extends EntityRepository
{
    private $maxResults = 10;
    
    public function setMaxResults($value = 10) {
        $this->maxResults = $value;
        
        return $this;
    }
    
    public function getVotes($id = NULL)
    {
        
        $dql = "SELECT AVG(v.value) FROM WyskoczBundle:Vote v " .
               "WHERE v.contentId = $id";
        $voteSum = $this->getEntityManager()
                        ->createQuery($dql)
                        ->getSingleScalarResult();
        return round($voteSum, 2);
        
    }
    
    public function checkIfVoted($userId, $id)
    {

        $vote = $this->findOneBy(array(
            'userId' => $userId,
            'contentId' => $id
        ));

        if(!empty($vote)) return true;
        else return false;
    }
    
    public function getUserVotesCount($user)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('COUNT(v.id)')
                ->from('WyskoczBundle:Vote', 'v')
                ->where('v.userId = :user')
                ->setParameter('user', $user)
                ;
        
        $result = $qb->getQuery()->getSingleScalarResult();
        return $result;
    }
    
    public function getUserVotes($user, $offset = 0) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('p.id, p.name, v.value')
                ->from('WyskoczBundle:Vote', 'v')
                ->where('v.userId = :user')
                ->leftJoin('WyskoczBundle:Place', 'p', 'WITH', 'p.id = v.contentId')
                ->setParameter('user', $user)
                ->setMaxResults($this->maxResults)
                ->setFirstResult($offset)
                ;
        $result = $qb->getQuery()->getResult();
        return $result;
        
    }
}
